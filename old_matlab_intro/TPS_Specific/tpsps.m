function [Xc,Yc]=tpsps(X,Y,method,npts)

%TPSPS Creates single Ps curve given X and Y, e.g. Mach and Altitude
%
%    [Xc,Yc]  = tpsps(X,Y)  
%             = tpsps(X,Y,method)       
%             = tpsps(X,Y,method,npts)
%
%   X      - X column of data at common Ps values
%   Y      - Y column of data at common Ps values
%   method - 'spine' or 'pchip', default is 'spline'
%   npts   - length of Xc and Yc, default is 10 times length of X
%   Xc     - X column of smooth contour through points in X,Y
%   Yc     - Y column of smooth contour through points in X,Y
%
% Examples:
%   tpsps           % no inputs runs default example, 'Ps'
%   tpsps('Boomer') % exampes are 'cirlce','Ps','Boomer', or 'ginput'
%   th=[0:pi/8:2*pi]'; r=2; X=r*cos(th); Y=r*sin(th);
%   [Xc,Yc]=tpsps(X,Y);
%   plot(X,Y,'bo',Xc,Yc,'r-'), axis equal, figure(gcf)
%
%  written by: Lt Col Tim Jorris, TPS/CS, June 2009

%% Run example or define defaults
if nargin == 0, ex_run('Ps'), return ; end % Run the default example
if nargin == 1, ex_run(X)   , return ; end % Run with 1st input as shape
if nargin <= 2, method='spline'      ; end % default method
if nargin <= 3, npts=10*length(X)    ; end % default number of points
[m,n]=size(X); if n > m, X=X'; end
[m,n]=size(Y); if n > m, Y=Y'; end
%% Compute spline and pchip functions
xsequence=1:length(X); % increasing index vice non-unique altitude
switch method  % Pick the method from both run above
    case 'spline'
        pp1= spline(xsequence,[X,Y]');  % spline
    case 'pchip'
        pp1= pchip (xsequence,[X,Y]');  % pchip
    otherwise
        error('Second argument must be ''spline'' or ''pchip''')
end
range = linspace(1,length(X),npts);
xiyi  = ppval(pp1,range);
Xc=xiyi(1,:)'; Yc=xiyi(2,:)';


function ex_run(shape)
[X,Y,loc]=ex_data(shape);
[Xc1,Yc1]=tpsps(X,Y,'spline');
[Xc2,Yc2]=tpsps(X,Y,'pchip');
%% Plot the example
if nargin<=1
    hl=plot(X,Y,'bo', ...
        Xc1,Yc1,'r-',Xc2,Yc2,'g-.'); figure(gcf)
    set(hl(3),'Color',[0 .7 0])
    legend('Raw Data', ...
        'Run with ''spline'' method', ...
        'Run with ''pchip'' method','Location',loc)
    xlabel('Mach'),ylabel('Altitude (ft)'), title('TPS P_s Curve from tpsps')
end
function [X,Y,loc]=ex_data(shape)
% This is just sample data previous captured using ginput
loc='SW';
switch shape
    case 'circle'
            XY=[     ...
    1.0093    0.0146
    0.4204    0.9053
   -0.4898    0.8809
   -1.0105    0.0097
    0.1673   -0.9832
    0.8536   -0.5013
    0.9996   -0.0195];  % circleish

    case 'Ps'
    XY=[
        
         0.716357308584687          24179.8941798942
         0.728886310904872          28624.3386243386
         0.751160092807425          32222.2222222222
         0.802668213457077           34973.544973545
         0.878538283062645          35502.6455026455
          0.93491879350348          33174.6031746032
         0.942575406032482           25978.835978836
         0.926566125290023          20582.0105820106
         0.900116009280742          16878.3068783069
         0.891763341067285          11164.0211640212
          0.90707656612529          7566.13756613756
         0.933526682134571          5555.55555555555
         0.943967517401392          2486.77248677249
         0.944663573085847          370.370370370372];   % Ps-ish
    case 'ginput'
     clf, axis([.7 1.5 0 40000]), [X,Y]=ginput; % pick your own
     XY=[X,Y];
    otherwise % 'Boomer'   
        loc='NE';
        XY=[
                     0.785220729366603           11794.403892944
         0.783685220729367          17877.1289537713
         0.782149712092131          23534.0632603406
         0.783685220729367          29677.6155717762
         0.785220729366603          32779.8053527981
         0.858925143953935          32901.4598540146
          0.90806142034549          31015.8150851581
         0.928023032629559          28826.0340632603
         0.926487523992323          26088.8077858881
         0.918809980806142          24081.5085158151
         0.871209213051824          23534.0632603406
         0.831285988483685          23534.0632603406
         0.797504798464492          23473.2360097324
          0.84510556621881          23473.2360097324
         0.903454894433781          23047.4452554744
          0.91573896353167          20553.5279805353
         0.914203454894434          17572.9927007299
         0.914203454894434          15748.1751824817
         0.878886756238004          15200.7299270073
         0.819001919385797           15139.902676399
         0.794433781190019          15018.2481751825
         0.877351247600768           15139.902676399
         0.935700575815739          15200.7299270073
         0.932629558541267          16295.6204379562
         0.938771593090211          18302.9197080292
         0.967946257197697          18850.3649635036
         0.989443378119002           19154.501216545
         0.954126679462572          18911.1922141119
         0.931094049904031          17755.4744525547
         0.929558541266795          16052.3114355231
         0.964875239923225          15504.8661800487
          1.00786948176584          15930.6569343066
          1.02015355086372          17329.6836982968
          1.01094049904031          18607.0559610706
          0.99404990403071          19276.1557177616
         0.972552783109405          19215.3284671533
           1.0785028790787          19580.2919708029
           1.0447216890595          19215.3284671533
           1.0278310940499          17755.4744525547
          1.03550863723608          16052.3114355231
          1.05393474088292          15079.0754257908
          1.10767754318618          15018.2481751825
          1.12917466410749          16173.9659367397
          1.13224568138196          17755.4744525547
          1.12303262955854          18850.3649635036
                       1.1          19397.8102189781
          1.08157389635317          20006.0827250608
          1.15374280230326          20249.3917274939
          1.15374280230326          16295.6204379562
          1.15374280230326          19884.4282238443
          1.18138195777351          21040.1459854015
          1.19980806142035          20736.0097323601
          1.19980806142035          15383.2116788321
          1.20134357005758           19154.501216545
          1.22898272552783          20066.9099756691
          1.25508637236084          19336.9829683698
          1.25969289827255          15261.5571776156
          1.29040307101727          15444.0389294404
          1.32725527831094          15869.8296836983
          1.34414587332054          17451.3381995134
          1.34568138195777          19032.8467153285
          1.33646833013436          20371.0462287105
          1.31804222648752          20979.3187347932
          1.29500959692898          20675.1824817518
          1.29347408829175          18789.5377128954
          1.30729366602687          16843.0656934307
          1.35489443378119          15748.1751824817
          1.37946257197697           16478.102189781
          1.39481765834933           18485.401459854
          1.39481765834933           19823.600973236
          1.41324376199616          20127.7372262774
          1.43474088291747          20066.9099756691
          1.45623800383877          20006.0827250608
          1.43474088291747          19215.3284671533
          1.42245681381958          17329.6836982968
          1.43320537428023          16113.1386861314
          1.45163147792706            15809.00243309
          1.47773512476008          16113.1386861314
          1.48848368522073          16538.9294403893]; % Boomer
end
X=XY(:,1); Y=XY(:,2);

